skip:13
//Deconstruct and play around with it yourself to figure out what everything is I guess.
//Also, this is a slow mess (on the python executor), might be faster when I make a C version of the executor.
//Most of this is just using the features of this language.
//Because this language doesn't have lists, you have to define a variable with a base name, then add an id onto the end to fake a list.
//If you put "%" before a variable when doing most things, it'll tell the language "I want to use the value of the variable, instead of the raw text"
//so "ifSkip>2:r:(%hello==5)" means if the variable with a name that matches the value of hello equals 5, skip the next line
//Skips and rewinds count themselves as line 0.
//Only after I wrote this did I realize that you can't use variables in skips and whatnot...
//I feel that should stay, simply because there's enough weird thought processes that need to be used to actual script in this language.
//Also, I think this is a relatively optimized script, with decently little glitches.

//Width and height of board
saynl:'Width: '
def:Board_Width,input
//Subtract one from board width to give the user the size they want.
m:Board_Width-1
saynl:'Height: '
def:Board_Height,input
//Subtract one from board height to give the user the size they want.
m:Board_Height-1
//Head starts in the middle.
def:headX,Board_Height
//Center head on X axis
m:headX/2
//Round head position on X axis
i:headX
def:headY,Board_Width
//Center head on Y axis
m:headY/2
//Round head position on Y axis
i:headY
//Define variables
def:move,''
def:last_move,''
//Player starts 2 segments long
def:segments,2
//Define first 2 segments manually
def:segX1,headX
m:segX1-1
def:segY1,headY
def:segX2,headX
m:segX2-2
def:segY2,headY
//Define apple starting location
def:appleX,rand=0:Board_Height
def:appleY,rand=0:Board_Width
//Segment which contains the apple (if one contains the apple), elsewise this variable is just 0
def:appleSegment,0
def:justAddedSegment,0
//Variable for weather or not the player is dead
def:isDead,0
mark:start loop
    //Get input
    m:move=input
    //This line is here because for some reason it glitches if I put this one the end of the other move validator
    ifSkip>3:r:(move==' ') or r:(move=='')
    //Go back to start if move is invalid (prevents the player from dying because they made an invalid move)
    ifNotGotoMarker>start loop:r:(move=='w') or r:(move=='a') or r:(move=='s') or r:(move=='d') or r:(move=='end')
    //Store last move to move
    ifSkip>2:r:(move=='w') or r:(move=='a') or r:(move=='s') or r:(move=='d') or r:(move=='end')
        m:move=last_move
    def:segCheck,segments
    m:segCheck+1
    m:segCheck+justAddedSegment
    //Move all segments to the next segment.
    unmark:loopSegments_1
    mark:loopSegments_1
        def:segX_1,'segX'
        def:segX_2,'segX'
        def:segY_1,'segY'
        def:segY_2,'segY'
        m:segX_1+segCheck
        m:segY_1+segCheck
        segCheck--
        m:segX_2+segCheck
        m:segY_2+segCheck
        def:placeholderX,headX
        def:placeholderY,headY
        ifSkip>3:r:(segCheck==0)
            m:placeholderX=%segX_2
            m:placeholderY=%segY_2
        m:%segX_1=placeholderX
        m:%segY_1=placeholderY
		destroy:placeholderX
		destroy:placeholderY
		destroy:segX_1
		destroy:segX_2
		destroy:segY_1
		destroy:segY_2
    ifGotoMarker>loopSegments_1:r:(segCheck>0)
    destroy:segCheck
    //Store previous head position
    def:prevHeadX,headX
    def:prevHeadY,headY
    //Call input helper method
    def:called,0
    mark:preCallCheckAndHandleInput
    ifNotSkip>3:r:(called==0)
        m:called=1
        gotoMark:CheckAndHandleInput
    unmark:preCallCheckAndHandleInput
    //Handle death on edge of board and manual end
    ifNotSkip>7:r:(move=='end') or r:(headX<0) or r:(headY<0) or r:(headX>Board_Height) or r:(headY>Board_Width)
        say:''
        say:''
        say:''
        saynl:'Your score:'
        sayAndParse:segments
        gotoEnd
    //Handle post input
    ifNotSkip>4:r:(headX==prevHeadX) and r:(headY==prevHeadY)
        destroy:prevHeadY
        destroy:prevHeadX
        gotoMark:start loop
    destroy:prevHeadY
    destroy:prevHeadX
    //Store last valid move
    m:last_move=move
    //Check if player is dead
    def:segCheck,1
    unmark:loopSegments_2
    mark:loopSegments_2
        def:segX_1,'segX'
        def:segY_1,'segY'
        m:segX_1+segCheck
        m:segY_1+segCheck
        ifNotSkip>2:r:(%segX_1==headX) and r:(%segY_1==headY)
            m:isDead=1
        segCheck++
        destroy:segX_1
        destroy:segY_1
    ifGotoMarker>loopSegments_2:r:(segCheck<=segments)
    unmark:end_loop_segments_2
    destroy:segCheck
    //New segment has been ignored I think? Can't remember how important this variable is
    m:justAddedSegment=0
    //Display (I really cannot commentate more on this, there's way too much)
    def:x_loop,0
    unmark:start_loop_print_x
    def:display,''
    m:display+'\n'
    m:display+'\n'
    m:display+'\n'
    mark:start_loop_print_x
        def:y_loop,0
            unmark:start_loop_print_Y
            mark:start_loop_print_Y
                m:display+'_'
                unmark:else
                ifGotoMarker>else:r:(x_loop==headX) and r:(y_loop==headY)
                    def:segCheck,1
                    def:segmentsInTile,0
                    unmark:loopSegments
                    mark:loopSegments
                        def:segX,'segX'
                        def:segY,'segY'
                        m:segX+segCheck
                        m:segY+segCheck
                        ifNotSkip>11:r:(%segX==x_loop) and r:(%segY==y_loop)
                            ifSkip>10:r:(segmentsInTile>=1)
                                ifSkip>6:r:(appleX==x_loop) and r:(appleY==y_loop)
                                    ifNotSkip>3:r:(segCheck==segments)
                                        m:display+'c'
                                    skip:2
                                        m:display+'o'
                                skip:3
                                    m:display+'0'
                                    m:appleSegment=segCheck
                            segmentsInTile++
                        segCheck++
                    ifGotoMarker>loopSegments:r:(segCheck<=segments)
                    destroy:segCheck
                    ifSkip>5:r:(segmentsInTile>=1)
                        ifSkip>3:r:(appleX==x_loop) and r:(appleY==y_loop)
                            m:display+' '
                        skip:2
                            m:display+'a'
                    destroy:segmentsInTile
                skip:3
                mark:else
                    m:display+'O'
            m:display+''
            m:y_loop+1
            ifGotoMarker>start_loop_print_Y:r:(y_loop<=Board_Width)
        destroy:y_loop
        m:x_loop+1
        m:display+'\n'
    ifGotoMarker>start_loop_print_x:r:(x_loop<=Board_Height)
    destroy:x_loop
    m:display+'\n'
    sayAndParse:display
    destroy:display
    //Handle death
    ifNotSkip>7:r:(isDead==1)
        sayAndParse:''
        sayAndParse:''
        sayAndParse:''
        saynl:'Your score:'
        sayAndParse:segments
        gotoEnd
    //Define segment and length variables for apple detection and printing
    def:prevAppleSegment,appleSegment
    def:prevLength,segments
    //Get the coords of the segment which the apple is in
    def:appleSegX,'segX'
    def:appleSegY,'segY'
    m:appleSegX+appleSegment
    m:appleSegY+appleSegment
    //Spawn new segment and move apple if the apple is in the same tile as the segment, and the apple is in the last segment of the snake
    ifNotGotoMarker>end_create_segment:r:(%appleSegX==appleX) and r:(%appleSegY==appleY) and r:(appleSegment==segments)
        m:appleSegment+1
        //Spawn new segment
        def:newSegX,'segX'
        def:newSegY,'segY'
        m:newSegX+%appleSegment
        m:newSegY+%appleSegment
        def:%newSegX,%appleX
        def:%newSegY,%appleY
        m:segments+1
        //Randomize apple coords
        def:rand1,rand=0:Board_Height
        def:rand2,rand=0:Board_Width
        m:appleX=rand1
        m:appleY=rand2
        //Destroy variables
        destroy:rand1
        destroy:rand2
        //Apple segment = 0 to avoid glitches
        m:appleSegment=0
        destroy:newSegX
        destroy:newSegY
        m:justAddedSegment+1
    unmark:end_create_segment
    mark:end_create_segment
    destroy:appleSegX
    destroy:appleSegY
    //Say text at bottom of board relating to apple
    ifSkip>9:r:(prevAppleSegment==0)
        saynl:'Apple in segment:'
        ifNotSkip>3:r:(appleSegment<prevAppleSegment)
            sayAndParsenl:prevAppleSegment
        skip:2
            sayAndParsenl:appleSegment
        saynl:' of '
        sayAndParse:prevLength
    gotoMark:end_print_not_in_tail
        ifSkip>5:r:(appleX==headX) and r:(appleY==headY)
            saynl:'Apple is not in snake, '
            sayAndParsenl:prevLength
            say:' segments.'
        skip:4
            saynl:'Apple is in head, '
            sayAndParsenl:prevLength
            say:' segments.'
    unmark:end_print_not_in_tail
    mark:end_print_not_in_tail
    //Destroy extra variables
    destroy:prevAppleSegment
    destroy:prevLength
gotoMark:start loop
//This should never get called, but just in case it does, I'm gonna send the point of execution straight to the end.
gotoEnd




//This is more or less how you do voids.

//For java users, all variables that don't get destroyed before calling this method are static.
//The code above is the "public static void main(String[] args)" method, this is a void method.

//Idk python terminology, but, for python users, the variables that aren't destroyed are the ones just laying in the file,
//and the code above would be the code that gets executed if you run the file.
mark:CheckAndHandleInput
unmark:CheckAndHandleInput
//This just speeds it up, as the first time it gets called, it has to iterate through till the "CheckAndHandleInput", then set the line to that.
//If you didn't mark, unmark, mark, then it'd have to do that every single time.
mark:CheckAndHandleInput

ifNotSkip>2:r:(move=='d') and r:(last_move!='a')
    headY++
ifNotSkip>2:r:(move=='a') and r:(last_move!='d')
    headY--
ifNotSkip>2:r:(move=='w') and r:(last_move!='s')
    headX--
ifNotSkip>2:r:(move=='s') and r:(last_move!='w')
    headX++

//ALWAYS put a gotoMark after any helper methods
gotoMark:preCallCheckAndHandleInput